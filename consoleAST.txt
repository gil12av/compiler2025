gil@gil-VirtualBox:~/Desktop/compilation course/compiler 2025$ yacc -d parserWithAst.y
gil@gil-VirtualBox:~/Desktop/compilation course/compiler 2025$ lex scanner.l
gil@gil-VirtualBox:~/Desktop/compilation course/compiler 2025$ gcc lex.yy.c y.tab.c -o parserAst -lfl
gil@gil-VirtualBox:~/Desktop/compilation course/compiler 2025$ ./parserAst < astExample.txt
Starting to parse input ..... 
                                                                                           ‘’
YEAH! Parse Successful!
Here is the AST tree:

(CODE)
 (FUNC_DEF)
  (FUNC)
   (foo)
   (PARS)
    (par1 INT x)
    (par2 INT y)
     (par3 INT z)
      (par4 REAL f)
  (FUNC_PARTS)
   (NONE)
   (BODY)
    (BODY_252)
     (BLOCK)
      (LINE223)
      (IF_ELIF_ELSE)
       (IF)
        (>)
         (x)
         (y)
        (BODY_252)
         (BLOCK)
          (LINE223)
          (=)
           (x)
           (+)
            (x)
            (y)
       (ELSE)
        (BODY_252)
         (BLOCK)
          (LINE223)
          (=)
           (y)
           (+)
            (+)
             (x)
             (y)
            (z)
             (=)
              (z)
              (*)
               (y)
               (2)
                (=)
                 (f)
                 (z)
    (FUNC_DEF)
     (FUNC)
      (goo)
      (EMPTY_PAR)
     (FUNC_PARTS)
      (CHAR)
      (BODY)
       (BODY_252)
        (BLOCK)
         (LINE223)
         (RET)
          (a
