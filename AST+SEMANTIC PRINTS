gil@gil-VirtualBox:~/Desktop/compilation course/compiler 2025/part2$ yacc -d -v parser.y
parser.y: warning: 3 shift/reduce conflicts [-Wconflicts-sr]
parser.y: note: rerun with option '-Wcounterexamples' to generate conflict counterexamples
gil@gil-VirtualBox:~/Desktop/compilation course/compiler 2025/part2$ lex scanner.l
gil@gil-VirtualBox:~/Desktop/compilation course/compiler 2025/part2$ gcc -o parser y.tab.c lex.yy.c semantic.c symbol_table.c -I. -lfl
gil@gil-VirtualBox:~/Desktop/compilation course/compiler 2025/part2$ ./parser < astExample.txt
Starting to parse input ..... 
                                                                                   
========== SYMBOL_TABLE: ===========
     name = f       , kind = 1, type = 1, line = 1
     name = x       , kind = 1, type = 0, line = 1
     name = y       , kind = 1, type = 0, line = 1
     name = z       , kind = 1, type = 0, line = 1
     name = foo     , kind = 2, type = 8, line = 13
====================================== 

     
========== SYMBOL_TABLE: ===========
     name = main_   , kind = 2, type = 8, line = 18
     name = f       , kind = 1, type = 1, line = 1
     name = x       , kind = 1, type = 0, line = 1
     name = y       , kind = 1, type = 0, line = 1
     name = z       , kind = 1, type = 0, line = 1
     name = foo     , kind = 2, type = 8, line = 13
====================================== 


========== SYMBOL_TABLE: ===========
  name = main_   , kind = 2, type = 8, line = 18
  name = f       , kind = 1, type = 1, line = 1
  name = x       , kind = 1, type = 0, line = 1
  name = y       , kind = 1, type = 0, line = 1
  name = z       , kind = 1, type = 0, line = 1
  name = foo     , kind = 2, type = 8, line = 13
====================================== 


YEAH! Parse Successful!
Here is the AST tree:

(CODE
  (FUNC
    (foo)
    (PARS
      (par1 INT x)
      (par2 INT y
        (par3 INT z
          (par4 REAL f)
        )
      )
    )
    (RET NONE)
    (BODY
      (BLOCK)
      (FUNC
        (main_)
        (PARS NONE)
        (RET NONE)
        (BODY
          (BLOCK)
        )
      )
    )
  )
)
